from Tkinter import *
import numpy as np
import cv2
import tkFileDialog

from Tkinter import *


window = Tk()
frame = Frame(window)
frame.pack()

def newwindow():
    top = Toplevel()
    top.minsize(width=200, height=100)
    

#create button


    top.QueryFileName = 'seal26.png'
    DBFileNames = ['seal24.png', 'seal22.png', 'seal25.png','seal23.png','seal21.png','seal10.png']

    def selectimage1():
        filePath= tkFileDialog.askopenfile() # don't override the built-in file class
        top.QueryFileName = filePath.name
        print top.QueryFileName
    
    def selectimage2():
        top.fileName = tkFileDialog.askopenfile(mode="r",filetypes=(("All files","*.*"),("description file","*.desc"),))
        print (top.fileName)   


    button = Button(top, text="Select Unknown Image", command=selectimage1,activebackground="blue", background="green")

    button.pack()

#create a second button

# w = Button(top, text="select 2nd image", command=selectimage2,activebackground="blue", background="yellow",)

# w.pack()

#create next button for surf
#define draw matches


		
    def drawMatches(img1, kp1, img2, kp2, matches):
            rows1 = img1.shape[0]
            cols1 = img1.shape[1]
            rows2 = img2.shape[0]
            cols2 = img2.shape[1]
            out = np.zeros((max([rows1,rows2]),cols1+cols2,3), dtype='uint8')
            out[:rows1,:cols1,:] = np.dstack([img1, img1, img1])
            out[:rows2,cols1:cols1+cols2,:] = np.dstack([img2, img2, img2])
            for mat in matches:
                    img1_idx = mat.queryIdx
                    img2_idx = mat.trainIdx
                    (x1,y1) = kp1[img1_idx].pt
                    (x2,y2) = kp2[img2_idx].pt
                    cv2.circle(out, (int(x1),int(y1)), 4, (255,0, 0), 1)
                    cv2.circle(out, (int(x2)+cols1,int(y2)), 4, (255, 0, 0), 1)
                    cv2.line(out, (int(x1),int(y1)), (int(x2)+cols1,int(y2)), (255, 0, 0), 1)
            cv2.imshow('Matched Features', out)
            cv2.waitKey(0)
            cv2.destroyAllWindows()

	
    def surf():
        import numpy as np
        import cv2
        sift = cv2.SIFT()

        print 'Query image:', top.QueryFileName
        queryImg = cv2.imread(top.QueryFileName,0)
        (queryKP, queryDesc) = sift.detectAndCompute(queryImg, None)

        names = []
        keypoints = []
        descriptors = []
        matchCounts = []
        for filename in DBFileNames:
            img = cv2.imread(filename, 0)
            (kp,des) = sift.detectAndCompute(img, None)
            names.append(filename)
            keypoints.append(kp)
            descriptors.append(des)
            matchCounts.append(0)

        FLANN_INDEX_KDTREE = 1
        index_params = dict(algorithm = FLANN_INDEX_KDTREE, trees = 5)
        search_params = dict(checks = 50)

        flann = cv2.FlannBasedMatcher(index_params, search_params)
        flann.add(descriptors)
        flann.train()

        k = 2
        matches = flann.knnMatch(queryDesc, k)
        print "Found %d * %d matches" % (len(matches), k)

        good = []
        for matlist in matches:
            minDistance = 2*min([m.distance for m in matlist])
            for m in matlist:
                if m.distance < minDistance:
                    good.append(m);
                    matchCounts[m.imgIdx] = matchCounts[m.imgIdx] + 1
                
        good = sorted(good, key=lambda val:val.distance)
        print "Filtered %d matches" % (len(good))
        print matchCounts
    
        bestImgIdx = matchCounts.index(max(matchCounts))
        print "Best image index: %d" % (bestImgIdx)

        img = cv2.imread(names[bestImgIdx], 0)
        filteredMatches = [m for m in good if m.imgIdx == bestImgIdx]
        drawMatches(queryImg, queryKP, img, keypoints[bestImgIdx], filteredMatches[:10])
    
    

#run algorithm

#make a menu bar

    def close():
        exit()

    menubar = Menu(window)

    filemenu = Menu(menubar, tearoff=0)
    filemenu.add_command(label="Close", command=close)
    menubar.add_cascade(label="File", menu=filemenu)

    top.config(menu=menubar)
    
    
    z = Button(top, text="Comapare to Database", command=surf,activebackground="blue",)
    z.pack()

    top.mainloop()

    
# modify the window
window.title("SEAL-IT")
window.geometry("800x400")

Label(window,
text="SEAL-IT",
fg = "light green",
bg = "dark green",
font = "Helvetica 30 bold italic").pack(anchor=CENTER)


bottomframe = Frame(window)
bottomframe.pack()

Label(window,
text="Images Supplied by CRESLI",
fg = "white",
bg = "dark blue",
font = "Helvetica 10 bold").pack(side=LEFT, anchor=SW)

Label(window,
text="Patent Pending",
fg = "light blue",
bg = "dark blue",
font = "Helvetica 10 italic").pack(side=RIGHT, anchor=SE)
#comparebutton
comparebutton = Button(bottomframe, text="Compare", fg="black",command=newwindow,activebackground="blue", background="blue")
comparebutton.pack(side= LEFT ,pady=10, anchor=CENTER)


#create frame in main window
sealFrame = Frame(window, width=100, height=100)
sealFrame.grid(row=3, column=2, padx=10, pady=2)


#create label for frame
firstLabel = Label(sealFrame)
firstLabel.grid(row=0, column=0, padx=10, pady=2)

#create image in frame

imageEx = PhotoImage(file = 'Seal4.gif')
Label(sealFrame, image=imageEx).grid(row=0, column=0, pady=10)



sealFrame.pack(anchor=CENTER)

#open second window





window.mainloop()
############################
